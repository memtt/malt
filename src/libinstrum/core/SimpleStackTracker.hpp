/***********************************************************
*    PROJECT  : MALT (MALoc Tracker)
*    VERSION  : 1.2.4
*    DATE     : 10/2024
*    LICENSE  : CeCILL-C
*    FILE     : src/lib/core/SimpleStackTracker.hpp
*-----------------------------------------------------------
*    AUTHOR   : Sébastien Valat - 2014 - 2024
*    AUTHOR   : Sébastien Valat (ECR) - 2014
***********************************************************/

#ifndef MALT_SIMPLE_BACKTRACE_STORAGE_HPP
#define MALT_SIMPLE_BACKTRACE_STORAGE_HPP

/**********************************************************/
//extern
#include <map>
#include <vector>
#include <ostream>
// #include <json/TypeToJson.h>
//locals
#include "SymbolSolver.hpp"
#include <stacks/BacktraceStack.hpp>
#include "SimpleCallStackNode.hpp"
#include "ValgrindOutput.hpp"
#include <common/STLInternalAllocator.hpp>
#include <common/Array.hpp>

/**********************************************************/
namespace MALT
{

/**********************************************************/
//typedef std::vector<SimpleCallStackNode*> SimpleBacktraceVector;
/**
 * Vector of call stack node pointers. It also replace the default memory
 * allocator to use the internal on not to self disturb the profiling.
**/
typedef std::vector<SimpleCallStackNode*,STLInternalAllocator<SimpleCallStackNode*> > SimpleBacktraceVector;
// typedef MALT::Array<SimpleCallStackNode*> SimpleBacktraceVector;
// typedef std::map<StackHash,SimpleBacktraceVector> SimpleBacktraceVectorMap;
/**
 * Build a hash map to point the call stack nodes. The index of the hash map
 * is a hash of the call stack. The data stores is a vector so we can list
 * all the call stack nodes having the same hash.
 * It also replace the default memory allocator to use the internal on not to 
 * self disturb the profiling.
**/
typedef std::map<StackHash,SimpleBacktraceVector,std::less<StackHash>,STLInternalAllocator<std::pair<StackHash,SimpleBacktraceVector> > > SimpleBacktraceVectorMap;

/**********************************************************/
/**
 * It is used to keep track of the prifiling state attached the the call stacks.
 * 
 * @brief Implement a call stack tracker.
**/
class SimpleStackTracker
{
	public:
		SimpleStackTracker(void);
		~SimpleStackTracker(void);
		SimpleCallStackNode& getBacktraceInfo(const Stack& stack, int skipDepth = 0);
		void solveSymbols(SymbolSolver & symbolResolver);
		void fillValgrindOut(MALT::ValgrindOutput& out, MALT::SymbolSolver& symbolResolver) const;
	public:
		friend std::ostream & operator << (std::ostream & out,const SimpleStackTracker & tracer);
		friend void convertToJson(htopml::JsonState & json, const SimpleStackTracker & value);
	private:
		/** Hash table keeping track of the call stack infos. **/
		SimpleBacktraceVectorMap callmaps;
		/** Number of uniq call stacks generated by the run. **/
		size_t count;
};

}

#endif //MALT_SIMPLE_BACKTRACE_STORAGE_HPP
